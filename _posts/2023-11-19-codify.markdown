# Codify(HTB)

![Untitled](Codify(HTB)/assets/images/codify/23.png)

## NMAP

```bash
Nmap scan report for 10.10.11.239
Host is up (0.039s latency).
Not shown: 995 closed tcp ports (conn-refused)
PORT     STATE SERVICE    VERSION
22/tcp   open  ssh        OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   256 96071cc6773e07a0cc6f2419744d570b (ECDSA)
|_  256 0ba4c0cfe23b95aef6f5df7d0c88d6ce (ED25519)
80/tcp   open  http       Apache httpd 2.4.52
|_http-title: Did not follow redirect to http://codify.htb/
|_http-server-header: Apache/2.4.52 (Ubuntu)
3000/tcp open  http       Node.js Express framework
|_http-title: Codify
8000/tcp open  http-alt?
8080/tcp open  http-proxy
|_http-open-proxy: Proxy might be redirecting requests
|_http-title: Site doesn't have a title (text/html).
| fingerprint-strings: 
|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Help, Kerberos, LDAPBindReq, LDAPSearchReq, LPDString, RPCCheck, SMBProgNeg, SSLSessionReq, Socks4, Socks5, TLSSessionReq, TerminalServerCookie, X11Probe: 
|     HTTP/1.1 400 Bad Request
|     Connection: close
|   FourOhFourRequest, GetRequest, HTTPOptions, RTSPRequest: 
|     HTTP/1.1 200 OK
|     Content-Type: text/html
|     Date: Sun, 05 Nov 2023 06:25:16 GMT
|     Connection: close
|_    Hello World!
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
```

## Recon

![Untitled](Codify(HTB)/assets/images/codify/1.png)

We get greeted by this page when we navigate to codify.htb (both port 80 and 3000)

> Codify is a simple web application that allows you to test your Node.js code easily. With Codify, you can write and run your code snippets in the browser without the need for any setup or installation.
> 

From the description of the site my initial guess was that this would be a RCE through node js . Coincidentally I had read about a RCE via node js template area so I started exploring with that assumption in mind.

> RCE via node js template area[https://twitter.com/ynsmroztas/status/1717905620001521773](https://twitter.com/ynsmroztas/status/1717905620001521773)
> 

However we see that from the description the code that we run are in a sandboxed environment.

> codify uses sandboxing technology to run your code. This means that your code is executed in a safe and secure environment, without any access to the underlying system. Therefore this has some limitations. We try our best to reduce these so that we can give you a better experience.
> 

The following libraries are disallowed

![Untitled](Codify(HTB)/assets/images/codify/2.png)

Knowing that a sandbox is used I wanted to figure out what sandboxing library is being used, as I believe a sandbox escape will most likely be needed here. Thus when we navigate to the about us page we see

![Untitled](Codify(HTB)/assets/images/codify/3.png)

> The vm2 library is a widely used and trusted tool for sandboxing JavaScript. It adds an extra layer of security to prevent potentially harmful code from causing harm to your system. We take the security and reliability of our platform seriously, and we use vm2 to ensure a safe testing environment for your code.
> 

If we click on the link we get directed to the github page of the vm2 library which has a bright red disclaimer.

![Untitled](Codify(HTB)/assets/images/codify/4.png)

if we go to the security page of the github repository we can see a critical sandbox escape vulnerability. 

![Untitled](Codify(HTB)/assets/images/codify/5.png)

The POC for this exploit

![Untitled](Codify(HTB)/assets/images/codify/6.png)

## Exploit

If we just copy the POC to the code editor on codify.htb we’ll get RCE

![Untitled](Codify(HTB)/assets/images/codify/7.png)

There we go,we get a reverse shell as the svc user. The svc user doesn’t actually have the user flag so that would mean we still need to pivot to a different user for the user flag. Therefore I started doing my usual enumeration. First I looked at the /var/www directory.

![Untitled](Codify(HTB)/assets/images/codify/8.png)

![Untitled](Codify(HTB)/assets/images/codify/9.png)

Looking at the /var/www directory we find 3 directories 

- html
- editor
- contact

The html directory is nothing of interest and the editor directory is the website we just exploited. Howver, the contact site is a different website that has a db file that would be of interest to us. Looking at the index.js 

![Untitled](Codify(HTB)/assets/images/codify/10.png)

We see that its another express/node js application that creates a **“tickets.db”** sqlite database file with the username and password of users. Since this web application is supposed to be on port 3001, I checked for the open ports on the box to see if it is running.

![Untitled](Codify(HTB)/assets/images/codify/11.png)

We see that port 3001 is not opened therefore we most likely won’t need to exploit this website. Then I looked at the **“tickets.db”** file.

![Untitled](Codify(HTB)/assets/images/codify/12.png)

Looking at the **“tickets.db”** database file we find the password hash for the user “joshua”.

> $2a$12$SOn8Pf6z8fO/nVsNbAAequ/P6vLRJJl7gCUEiYBU2iLHn4G/p/Zw2
> 

looking at the /etc/passwd of the box we can see that  joshua is also a user on the box.

![Untitled](Codify(HTB)/assets/images/codify/13.png)

The hash looks like a bcrypt hash so lets pass it into hashcat. When I was doing the box I thought it was a bcrypt(sha512) hash since the hash starts with $2a$12.

![Untitled](Codify(HTB)/assets/images/codify/14.png)

Turns out its just a basic bcrypt(blowfish) hash 🤷‍♂️

![Untitled](Codify(HTB)/assets/images/codify/15.png)

![Untitled](Codify(HTB)/assets/images/codify/16.png)

Now that we have joshua’s password we can ssh into the box as joshua and get the user flag. 

## Privilege escalation

Running sudo -l as joshua shows that we can run a [mysql-backup.sh](http://mysql-backup.sh) script at /opt/scripts.

![Untitled](Codify(HTB)/assets/images/codify/17.png)

The script looks like this.

![Untitled](Codify(HTB)/assets/images/codify/18.png)

This is a simple bash script that if the correct password is provided will backup all the databases in mysql to the /var/backups/mysql. When I was doing the box I actually struggled a lot with exploiting this script. I couldn’t quite figure out what I had to do . I ended up resorting to looking at the HTB official forum for some hints. After reading the comments I learnt that some special characters would make the application do something unexpected. Thus I wrote a python script to try bruteforcing special characters.

![Untitled](Codify(HTB)/assets/images/codify/19.png)

Running the python script we find that the * character will be accepted as a password for the script

![Untitled](Codify(HTB)/assets/images/codify/20.png)

Looking at PSPY on another terminal we can see the root password

![Untitled](Codify(HTB)/assets/images/codify/21.png)

## **Beyond Root**

After rooting the box I did some digging as to why the * character would be accepted as a password. Looking at the GNU documentation it says that

> *Bash scans each word for the characters ‘*’, ‘?’, and ‘[’. If one of these characters appears, and is not quoted, then the word is regarded as a pattern,*
> 

And what is a pattern?

![Untitled](Codify(HTB)/assets/images/codify/22.png)

Since * Matches any string when we input the * character the $USER_PASS variable will always be evaluate to T**rue** when compared to the $DB_PASS string. (?????????????????????) 21 question marks will also work in this case if we know that the password is 21 character long or we could bruteforce it.

```bash
if [[ $DB_PASS == $USER_PASS ]]; then
        /usr/bin/echo "Password confirmed!"
else
        /usr/bin/echo "Password confirmation failed!"
        exit 1
fi
```
